; __START is the entrypoint into the OS code

.L __START
	; only pre hardware init to do is the stack
	LDX 0XFF, I
	TXS

	; cant do a lot without turning on the hw
	STA HW_LATCH HW_VIA HW_RAM

	; can set up values on the via
	; ca1 - keyboard interrupt, rising edge active
	; ca2 - nothing
	; cb1 - printer interrupt, falling edge active
	; cb2 - nothing
	; A - keyboard port, all inputs
	; B - printer port, all outputs
	LDA 1, I	; sets ca1 to rising edge active
	STA VIA_PCR
	DEC		; 0 in acc
	STA VIA_DDRA	; set port A to all inputs
	DEC		; 0xff in acc
	STA VIA_DDRB	; set port B to all outputs

	; init ram variables here
	STZ KB_FLAGS		; zero keyboard flags
	STZ KB_SHIFT		; zero keybaord shift flag

	STZ OUT_BUFFER_WI	; zero write and read indices
	STZ OUT_BUFFER_RI
	STZ IN_BUFFER_WI

	STZ PRINT_STATUS	; zero status flags
	STZ INPUT_STATUS
	STZ OUT_BUFFER_COPY_LEN
	CLI			; clear interrupt
	; test code below
;;
	LDA BV_INPUT, I
	BRK
.L INSYNC
	LDA INPUT_STATUS
	BNE INSYNC
	LDA INITSTR, I
	STA VR0
	LDA INITSTR + 8 >, I
	STA VR0 1
	LDA 2, I
	STA VR1
	LDA BV_PRINT, I
	BRK
	LDA IN_BUFFER_WI
	INC
	STA VR1
	LDA IN_BUFFER, I
	STA VR0
	LDA IN_BUFFER + 8 >, I
	STA VR0 1
	LDA BV_PRINT, I
	BRK
.L DIE
	JMP DIE
;;

.L INITSTR
.DROP ASCII_ESC
.DROP ASCII_AT
