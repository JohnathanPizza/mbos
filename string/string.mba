; STRING
;	STRLEN
;	STRCMP


; STRLEN
; P - (VR0) string pointer "P"
; R - (Y) length "L" (A) success status "S"
; M - none
; returns the number of characters in the string (length) pointed to by P
; string must be terminated with the null character and the null character is not counted
; L = 0 if the string is just the null character
; if the string length would be over 255, then S is FALSE, otherwise S is TRUE

.L STRLEN
	LDY 0, I		; initialize counter to 0
.L _STRLEN_LOOP
	LDA VR0, NY		; load character
	BEQ _STRLEN_END		; break if the character is the null character
			; else keep counting
	INY			; increment counter/index
	BNE _STRLEN_LOOP	; loop if the counter is not 0 (255 wraps to 0)
			; wrapped, string too large
	LDA FALSE, I		; load false
	RTS			; return
.L _STRLEN_END
	LDA TRUE, I		; load true
	RTS			; return


;=================================================


; STRCMP
; P - (VR0) pointer to string 1 "P1" (VR1) pointer to string 2 "P2"
; R - (A) T/F result "R"
; M - none
; compare two strings for equality
; two strings are equal if they have the same length and all parallel characters are equal in value
; R = 0 if the strings are equal
; R = not 0 if the strings are not equal
; both strings must be 255 characters long max or else only the first 256 charactesr will be checked

.L STRCMP
	PHY			; push Y register
	LDY 0, I		; initialize index to 0
.L _STRCMP_LOOP
	LDA VR0, NY		; load character of first string
	SEC			; sec for sub
	SBC VR1, NY		; sub first character with second character
	BNE _STRCMP_END		; if not 0, characters are not equal, return a nonzero number
			; acc value is 0 here
	CMP VR0, NY		; test if the characters are the null character
	BEQ _STRCMP_END		; if equal, characters are the null character, acc has value 0 for good return
			; else characters are not the null character, increment
	INY			; increment index
	BNE _STRCMP_LOOP	; loop if index did not wrap
			; acc has 0 right now for good return
.L _STRCMP_END
	PLY			; pull Y register
	RTS			; return
